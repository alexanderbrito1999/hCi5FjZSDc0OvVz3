---
import { config } from "../../../config/config";
import { sanitizeName } from "../../../libs/sanitizeName";
import { toHour } from "../../../libs/toHour";
import styles from "./Slideshow.module.scss";

let titles = [];
try {
  const response = await fetch(`${config.BACKEND_URL}/api/v1/titles_client_slideshow`);

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  const data = await response.json();
  titles = data; // Asumiendo que `data` ya es el array de títulos
} catch (error) {
  console.error("Error fetching titles for slideshow:", error);
  // Aquí podrías establecer un mensaje de error o un array vacío para mostrar "No titles"
}
---

<div class={styles.slideshow}>
  <div class={styles.top}>
    <a class={styles.title} href="/premieres">ESTRENOS</a>
    <!-- <a class={styles.wrapper_link} href="/premieres">
      <svg
        fill="currentColor"
        color="inherit"
        font-size="inherit"
        viewBox="0 0 48 48"
        xmlns="http://www.w3.org/2000/svg"
        width="1em"
        height="1em"
        ><path
          d="M12 4h4.4c.56 0 .84 0 1.05.1a1 1 0 0 1 .44.45c.11.21.11.49.11 1.05v1.1c0 .56 0 .84-.1 1.05a1 1 0 0 1-.45.44c-.21.11-.49.11-1.05.11H12A3.7 3.7 0 0 0 8.3 12v24a3.7 3.7 0 0 0 3.7 3.7h24a3.7 3.7 0 0 0 3.7-3.7v-4.4c0-.56 0-.84.1-1.05a1 1 0 0 1 .45-.44c.21-.11.49-.11 1.05-.11h1.1c.56 0 .84 0 1.05.1a1 1 0 0 1 .44.45c.11.21.11.49.11 1.05V36a8 8 0 0 1-8 8H12a8 8 0 0 1-8-8V12a8 8 0 0 1 8-8Z"
        ></path><path
          d="M27.54 5.77c0-.56 0-.84.1-1.05a1 1 0 0 1 .44-.44c.22-.1.5-.1 1.06-.1h12.54c1.18 0 2.15.95 2.15 2.14v12.54c0 .56 0 .84-.11 1.06a1 1 0 0 1-.44.44c-.21.1-.5.1-1.05.1h-1.1c-.56 0-.84 0-1.06-.1a1 1 0 0 1-.43-.44c-.11-.22-.11-.5-.11-1.06v-7.35L26.65 24.4c-.4.4-.6.6-.82.67a1 1 0 0 1-.62 0c-.23-.08-.43-.28-.82-.67l-.78-.78c-.4-.4-.6-.6-.67-.82a1 1 0 0 1 0-.62c.08-.23.27-.43.67-.82L36.5 8.47h-7.35c-.56 0-.84 0-1.06-.1a1 1 0 0 1-.44-.44c-.1-.22-.1-.5-.1-1.06v-1.1Z"
        ></path></svg
      >
    </a> -->
  </div>

  <div class={styles.grid}>
    {
      titles?.slice(0, 6).map((item: any) => (
        <a
          class={styles.item}
          href={`/titles/${item.id}-${sanitizeName(item.title)}-${new Date(item.date || Date.now()).getFullYear()}`}
        >
          <div class={styles.poster}>
            <div class={styles.container}>
              <img
                class={styles.image}
                src={`https://image.tmdb.org/t/p/w200${item.poster_portrait_path}`}
                alt="poster"
                loading="lazy"
              />

              {!item.is_hd && <div class={styles.is_hd}>CAM</div>}
            </div>
          </div>
          <div class={styles.metadata}>
            <div class={styles.item_metadata}>{new Date(item.date).getFullYear()}</div>
            {/* {!item.is_movie && <div class={styles.item_metadata}>TV</div>} */}
            {item.is_movie ? (
              <div class={styles.item_metadata}>{toHour(item.runtime)}</div>
            ) : (
              <div class={styles.item_metadata}>TV</div>
            )}
            {/* {item.is_movie && (
              <div class={styles.vote_average_metadata}>
                <p class={styles.icon_metadata}>
                  <img src="/cloud.svg" alt="" />
                </p>
                {item.vote_average?.toFixed(2)} GB
              </div>
            )} */}
          </div>
        </a>
      ))
    }
  </div>
  <div class={styles.bottom}>
    <a class={styles.button_showmore} href="/premieres">VER MÁS</a>
  </div>
</div>
